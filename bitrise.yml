format_version: 1.0.0
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git

app:
  envs:
  - BITRISE_BIN_NAME: stepman
  - BITRISE_IO_GO_PATH: $GOPATH/src/github.com/bitrise-io
  - STEPMAN_PATH: $BITRISE_IO_GO_PATH/$BITRISE_BIN_NAME
  - GITHUB_RELEASES_URL: https://github.com/bitrise-io/${BITRISE_BIN_NAME}/releases
  - INTERNAL_DEV_SLACK_WEBHOOK_URL: https://hooks.slack.com/services/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
  - INTERNAL_DEV_SLACK_CHANNEL: bitrise-devs
  - INTERNAL_DEV_LIFELINE_SLACK_CHANNEL: bitrise-dev-lifeline

trigger_map:
- pattern: '*'
  is_pull_request_allowed: true
  workflow: ci

workflows:
  # ----------------------------------------------------------------
  # --- workflows for CI and testing
  ci:
    description: |-
      Bitrise ci

      Used for bitrise continous integration.
      Prepare and Setup, Test and Install, notification.
    before_run:
    - _prepare_and_setup
    - test
    steps:
    - slack:
        title: Slack notifications
        run_if: .IsCI
        inputs:
        - webhook_url: $INTERNAL_DEV_SLACK_WEBHOOK_URL
        - channel: $INTERNAL_DEV_LIFELINE_SLACK_CHANNEL
        - from_username: ${BITRISE_BIN_NAME} - CI - OK
        - from_username_on_error: ${BITRISE_BIN_NAME} - CI - ERROR
        - message: |-
            CI was successful on branch: *${BITRISE_GIT_BRANCH}*

            Build URL: ${BITRISE_BUILD_URL}
        - message_on_error: |-
            CI FAILED on branch: *${BITRISE_GIT_BRANCH}*

            Build URL: ${BITRISE_BUILD_URL}

  _prepare_and_setup:
    description: |-
      Prepare and Setup

      Used fot bitrise-io.
      Git clone stepman, cd to stepman GOPATH, install testing tools, install envman.
    steps:
    - script:
        title: Install required testing tools
        run_if: .IsCI
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            set -v

            # Install dependencies
            go get -u github.com/tools/godep

            # Check for unhandled errors
            go get -u github.com/kisielk/errcheck

            # Go lint
            go get -u github.com/golang/lint/golint

  test:
    description: |-
      Stepman Test and Install

      Used fot testing prepared stepman.
      Errcheck, go lint, go test.
    steps:
    - script:
        title: Print infos for the test
        inputs:
        - content: |-
            set -x
            go version
            echo $GO15VENDOREXPERIMENT
    - script:
        title: Go list without vendor
        inputs:
        - content: |-
            set -e
            set -x
            no_vendor_paths="$(go list ./... | grep -v vendor)"
            envman add --key GOLIST_WITHOUT_VENDOR --value "$no_vendor_paths"
    - script:
        title: Go Test
        inputs:
        - content: go test ./...
    - script:
        title: Err check
        inputs:
        - content: errcheck -asserts=true -blank=true $GOLIST_WITHOUT_VENDOR
    - script:
        title: Go Lint
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            while read -r line; do
              echo "-> Linting: $line"
              golint_out="$(golint $line)"
              if [[ "${golint_out}" != "" ]] ; then
                echo "=> Golint issues found:"
                echo "${golint_out}"
                exit 1
              fi
            done <<< "$GOLIST_WITHOUT_VENDOR"

  # ----------------------------------------------------------------
  # --- workflows for Releasing
  announce-release:
    steps:
    - script:
        title: Creating deploy
        inputs:
        - content: |-
            #!/bin/bash
            set -v
            set -e
            go install
            # register the version for next steps
            binversion="$(${BITRISE_BIN_NAME} -version)"
            envman add --key RELEASE_VERSION --value "${binversion}"
    - slack@2.1.0:
        inputs:
        - webhook_url: $INTERNAL_DEV_SLACK_WEBHOOK_URL
        - channel: $INTERNAL_DEV_SLACK_CHANNEL
        - from_username: ${BITRISE_BIN_NAME}
        - message: |
            Release v${RELEASE_VERSION} was just published! :tada:

            You can find it at ${GITHUB_RELEASES_URL}
        - emoji: ':rocket:'

  create-release:
    # before_run:
    # - ci
    after_run:
    - create_changelog
    steps:
    - script:
        title: Creating deploy
        inputs:
        - content: |-
            #!/bin/bash
            set -v
            set -e
            if [ -f _bin/tmpbin ] ; then
              rm _bin/tmpbin
            fi
            go build -o _bin/tmpbin
            binversion="$(_bin/tmpbin -version)"
            echo "binversion: ${binversion}"
            mkdir -p _bin/${binversion}
            finalpth=_bin/${binversion}/${BITRISE_BIN_NAME}-$(uname -s)-$(uname -m)
            echo "finalpth: ${finalpth}"
            mv _bin/tmpbin "${finalpth}"
            # register the version for next steps
            envman add --key RELEASE_VERSION --value "${binversion}"
    - script:
        title: Creating release changelog template
        inputs:
        - content: |-
            changelog_path = "./_changelogs/#{ENV['RELEASE_VERSION']}.md"
            puts " * changelog_path: #{changelog_path}"
            template_content = File.read("./_changelogs/template.md")
            changelog_content = template_content.gsub("{{version}}", ENV['RELEASE_VERSION'])
            File.open(changelog_path, "w") do |f|
              f.write(changelog_content)
            end
            system("envman add --key changelog_path --value #{changelog_path}")
        - runner_bin: ruby
  create-release-with-docker-compose:
    steps:
    - script:
        title: Creating deploy
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            set -v

            docker-compose build --no-cache app
            docker-compose run --rm app bitrise run create-release

  # ----------------------------------------------------------------
  # --- workflows for Utility
  delete-stepman-dir:
    steps:
    - script:
        title: Delete local stepman dir
        inputs:
        - content: |-
            #!/bin/bash
            set -v
            set -e
            rm -rf ~/.stepman

  regenerate-default-collection:
    before_run:
    - delete-stepman-dir
    envs:
    - DEFAULT_STEPLIB_GIT: https://github.com/bitrise-io/bitrise-steplib.git
    steps:
    - script:
        title: Setup stepman
        inputs:
        - content: |-
            #!/bin/bash
            set -v
            set -e
            stepman setup -c ${DEFAULT_STEPLIB_GIT}

  godeps-update:
    description: |-
      Dependenci Update

      Used for updating stepman dependencies with godep
    steps:
    - script:
        title: Dependency update
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            set -v

            go get -u ./...
            rm -rf ./Godeps
            godep save ./...
