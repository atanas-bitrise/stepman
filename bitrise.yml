format_version: 0.9.10
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git

trigger_map:
- pattern: "*"
  is_pull_request_allowed: true
  workflow: ci

app:
  envs:
  - BITRISE_BIN_NAME: stepman
  - GITHUB_RELEASES_URL: https://github.com/bitrise-io/${BITRISE_BIN_NAME}/releases
  - SLACK_WEBHOOK_URL: https://hooks.slack.com/services/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
    opts:
      title: SLACK_WEBHOOK_URL
      is_expand: false
  - SLACK_CHANNEL: "#bitrise-dev-lifeline"
    opts:
      title: SLACK_CHANNEL
      is_expand: false

workflows:
  delete-stepman-dir:
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -v
            set -e
            rm -rf ~/.stepman

  regenerate-default-collection:
    envs:
    - DEFAULT_STEPLIB_GIT: https://github.com/bitrise-io/bitrise-steplib.git
    before_run:
    - delete-stepman-dir
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -v
            set -e
            stepman steup -c ${DEFAULT_STEPLIB_GIT}



  create-release:
    steps:
    - script:
        title: Creating deploy
        inputs:
        - content: |-
            #!/bin/bash
            set -v
            set -e
            if [ -f _bin/tmpbin ] ; then
              rm _bin/tmpbin
            fi
            go build -o _bin/tmpbin
            binversion="$(_bin/tmpbin -version)"
            echo "binversion: ${binversion}"
            mkdir -p _bin/${binversion}
            finalpth=_bin/${binversion}/${BITRISE_BIN_NAME}-$(uname -s)-$(uname -m)
            echo "finalpth: ${finalpth}"
            mv _bin/tmpbin "${finalpth}"
            # register the version for next steps
            envman add --key RELEASE_VERSION --value "${binversion}"
    - script:
        title: Creating release changelog template
        inputs:
        - content: |-
            changelog_path = "./_changelogs/#{ENV['RELEASE_VERSION']}.md"
            puts " * changelog_path: #{changelog_path}"
            template_content = File.read("./_changelogs/template.md")
            changelog_content = template_content.gsub("{{version}}", ENV['RELEASE_VERSION'])
            File.open(changelog_path, "w") do |f|
              f.write(changelog_content)
            end
        - runner_bin: ruby
  announce-release:
    steps:
    - script:
        title: Creating deploy
        inputs:
        - content: |-
            #!/bin/bash
            set -v
            set -e
            go install
            # register the version for next steps
            binversion="$(${BITRISE_BIN_NAME} -version)"
            envman add --key RELEASE_VERSION --value "${binversion}"
    - slack@2.1.0:
        inputs:
        - webhook_url: $SLACK_WEBHOOK_URL
        - channel: $SLACK_CHANNEL
        - from_username: ${BITRISE_BIN_NAME}
        - message: |
            Release v${RELEASE_VERSION} was just published! :tada:

            You can find it at ${GITHUB_RELEASES_URL}
        - emoji: ":rocket:"
  godeps-update:
    steps:
    - script:
          title: Dependency update
          inputs:
          - content: |-
              #!/bin/bash
              set -v
              set -e
              go get -u ./...
              rm -rf ./Godeps
              godep save ./...
  ci:
    envs:
    - BITRISE_IO_GO_PATH: "$GOPATH/src/github.com/bitrise-io"
    - STEPMAN_PATH: $BITRISE_IO_GO_PATH/stepman
    steps:
    - git-clone: {}
    - script:
        title: Symlink stepman
        run_if: ".IsCI"
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            set -v

            mkdir -p $BITRISE_IO_GO_PATH
            ln -s $BITRISE_SOURCE_DIR $STEPMAN_PATH
          opts:
            is_expand: true
    - script:
        title: Install required testing tools
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            set -v

            # Install dependencies
            go get -u github.com/tools/godep

            # Check for unhandled errors
            go get -u github.com/kisielk/errcheck

            # Go lint
            go get -u github.com/golang/lint/golint
    - script:
        title: Godeps - GOPATH patch
        inputs:
        - content: envman add --key GOPATH --value "$(godep path):$GOPATH"
    - script:
        title: Go Test
        inputs:
        - content: godep go test ./...
    - script:
        title: Err check
        inputs:
        - content: |-
            cd $STEPMAN_PATH
            errcheck -asserts=true -blank=true $(godep go list ./...)
            cd $BITRISE_SOURCE_DIR
    - script:
        title: Go Lint
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            set -v

            golint_out="$(golint ./...)"
            if [[ "${golint_out}" != "" ]] ; then
              echo "=> Golint issues found:"
              echo "${golint_out}"
              exit 1
            fi
    - slack:
        run_if: ".IsCI"
        inputs:
        - webhook_url: "$SLACK_WEBHOOK_URL"
        - channel: "$SLACK_CHANNEL"
        - from_username: "${BITRISE_BIN_NAME} - CI - OK"
        - from_username_on_error: "${BITRISE_BIN_NAME} - CI - ERROR"
        - message: |-
            CI was successful on branch: *${BITRISE_GIT_BRANCH}*

            Build URL: ${BITRISE_BUILD_URL}
        - message_on_error: |-
            CI FAILED on branch: *${BITRISE_GIT_BRANCH}*

            Build URL: ${BITRISE_BUILD_URL}
